// Existing verifications //

Instruction level verficiation
  - Instruction types
  - Bitcast instruction:
    - no bitcasts between address spaces
    - no invalid bitcast constant expression operands
  - Call instruction:
    - no indirect calls
    - valid calling convention
    - valid memfence for synchronize functions
    - valid intrinsic function

Function level verification
  - Function prototype
    - valid calling convention
    - valid return type

Module level verification:
  - valid triple
  - valid target data layout
  - metadata kernels
    - number of function kernels matches number of metadata kernels
    - first operand of a metadata kernel is a valid function type
    - Kernel Arg info
      - metadata arg address space exists and is valid
      - metadata arg type exists and is valid
      - metadata arg base type exists and is valid
  - valid OCL version
  - valid SPIR version
  - metadata optional core features - verify there is one valid entry or none
    - cl_doubles optional core feature is present when using double data type
    - cl_images optional core feature is present when using image data type
  - metadata KHR extensions - verify there is one valid entry or none
  - metadata compiler options - verify there is one valid entry or none
    

// TODO //

  - Types Alignment
    - verify load and store operations are aligned
    - verify Stack allocations and module scope variable declarations follow the alignment
      rules defined in OpenCL specification
  - Address Space Qualifier
    - Kernel calling another kernel: called kernel can’t have an allocation in the local address space
  - Optional Attribute Qualifiers metadata
    - validate work_group_size_hint, reqd_work_group_size, vec_type_hint metadata object
    - validate there is no attaching of workg group size hint or vector type hint to non-kernel SPIR function
  - Sampler data type
    - used only when valid initialization option present
    - used only with read built-ins
  - Kernel Arg info
    - metadata arg access qual is valid
    - metadata arg type qual is valid
    - metadata arg name is valid and present only when -cl-kernel-arg-info build option is present
  - Preprocessor Directives
    - verify FP_CONTRACT is used at module level only
  - SPIR and LLVM IR
    - LLVM Linkage type is valid type
    - Visibility Styles: validate "default" style is used
    - Parameter attributes: valid attributes are used
    - Function attributes
      - nounwind attribute is present
      - other used attributes are valid
    - Garbage Collection : verify a gc name is not specified
    - Module Level Inline Assembly: verify there is no usage of module level inlnie assmebly
    - disallow usage of the reserved identifier opencl.*
    - disallow atomic memory ordering
    - follow LLVM aliasing rules
    - follow LLvM volatile memoy access rules for load, store and llvm.memcpy 




  